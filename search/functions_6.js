var searchData=
[
  ['garbage_5fcollect_5farbitrary_5fobject',['garbage_collect_arbitrary_object',['../LuaMakeClass_8hh.html#a67490e3e2d44d33e15093bd2d401beaa',1,'garbage_collect_arbitrary_object(lua_State *L):&#160;LuaMakeClass.cc'],['../LuaMakeClass_8cc.html#a67490e3e2d44d33e15093bd2d401beaa',1,'garbage_collect_arbitrary_object(lua_State *L):&#160;LuaMakeClass.cc']]],
  ['garbage_5fcollect_5fcpp_5ffunction',['garbage_collect_cpp_function',['../namespaceLua.html#aab42b7ad2a65110e8cc48e4d8525dfff',1,'Lua']]],
  ['get',['Get',['../classLua_1_1LuaTableReference.html#ae746bd61de668c8c0c8fe72244f10de2',1,'Lua::LuaTableReference']]],
  ['getansicolorcode',['GetAnsiColorCode',['../namespacetesting_1_1internal.html#a0aefb9deb60e90f19c236559837303d8',1,'testing::internal']]],
  ['getboolassertionfailuremessage',['GetBoolAssertionFailureMessage',['../namespacetesting_1_1internal.html#a5fd6e5dc9eb20ab3c3a80e24d89dfac6',1,'testing::internal']]],
  ['getcurrentexecutablename',['GetCurrentExecutableName',['../namespacetesting_1_1internal.html#a7a2bbf069f75bc99873976ad6fc356ad',1,'testing::internal']]],
  ['getcurrentosstacktraceexcepttop',['GetCurrentOsStackTraceExceptTop',['../namespacetesting_1_1internal.html#a7ca65eb9f24d89fbc1e8cb108d3c6339',1,'testing::internal']]],
  ['getglobal',['GetGlobal',['../classLua_1_1LuaState.html#acacd2a248cc0bd41a5887113069344a9',1,'Lua::LuaState']]],
  ['getmaxinstructions',['GetMaxInstructions',['../classLua_1_1LuaCoroutine.html#af77e59313f2ec40bbf7f29e374ddb637',1,'Lua::LuaCoroutine']]],
  ['getmaxmemory',['GetMaxMemory',['../classLua_1_1LuaState.html#ad1450dc995cb65839e01ec6ceb514dea',1,'Lua::LuaState']]],
  ['getmemoryusage',['GetMemoryUsage',['../classLua_1_1LuaState.html#ae0bdcea21424bdf8034cddbf50495d69',1,'Lua::LuaState']]],
  ['gettesttypeid',['GetTestTypeId',['../namespacetesting_1_1internal.html#ad0d66d56ead224263cd100c1d6bfc562',1,'testing::internal']]],
  ['getthreadcount',['GetThreadCount',['../namespacetesting_1_1internal.html#a3b9b3649cd04558bf46c75de52a7ef34',1,'testing::internal']]],
  ['gettimeinmillis',['GetTimeInMillis',['../namespacetesting_1_1internal.html#ae66b46943a429e6efb1db456d4cae90c',1,'testing::internal']]],
  ['gtest_5fdefine_5fbool_5f',['GTEST_DEFINE_bool_',['../namespacetesting.html#afee59458b05682d57d3a389e0903bc01',1,'testing::GTEST_DEFINE_bool_(death_test_use_fork, internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false),&quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot;&quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot;&quot;implemented. Useful when running under valgrind or similar tools if &quot;&quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot;&quot;it sees an unsupported combination of clone() flags. &quot;&quot;It is not recommended to use this flag w/o valgrind though it will &quot;&quot;work in 99% of the cases. Once valgrind is fixed, this flag will &quot;&quot;most likely be removed.&quot;)'],['../namespacetesting.html#aaead7d1aa21cf4a222e10e4c91c21ee5',1,'testing::GTEST_DEFINE_bool_(also_run_disabled_tests, internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false),&quot;Run disabled tests too, in addition to the tests normally being run.&quot;)'],['../namespacetesting.html#a5c9316c2f726f836c50fcfc1065d718c',1,'testing::GTEST_DEFINE_bool_(break_on_failure, internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false),&quot;True iff a failed assertion should be a debugger break-point.&quot;)'],['../namespacetesting.html#a16f63f28356f1843888013487da9f89d',1,'testing::GTEST_DEFINE_bool_(catch_exceptions, internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true),&quot;True iff &quot;GTEST_NAME_&quot; should catch exceptions and treat them as test failures.&quot;)'],['../namespacetesting.html#a9ef54a5b29ac4b2a1e086e77224a0b19',1,'testing::GTEST_DEFINE_bool_(list_tests, false,&quot;List all tests without running them.&quot;)'],['../namespacetesting.html#a51fb68302e8e3fce5bd61340843a6e6a',1,'testing::GTEST_DEFINE_bool_(print_time, internal::BoolFromGTestEnv(&quot;print_time&quot;, true),&quot;True iff &quot;GTEST_NAME_&quot; should display elapsed time in text output.&quot;)'],['../namespacetesting.html#a5982e64522de6804cbf5d1732fd62751',1,'testing::GTEST_DEFINE_bool_(show_internal_stack_frames, false,&quot;True iff &quot;GTEST_NAME_&quot; should include internal stack frames when &quot;&quot;printing test failure stack traces.&quot;)'],['../namespacetesting.html#acc11444cd1c18500658a35e02d4f2cf9',1,'testing::GTEST_DEFINE_bool_(shuffle, internal::BoolFromGTestEnv(&quot;shuffle&quot;, false),&quot;True iff &quot;GTEST_NAME_&quot; should randomize tests&apos; order on every run.&quot;)'],['../namespacetesting.html#a05ff4385edff6d44f6823f5eade7abe2',1,'testing::GTEST_DEFINE_bool_(throw_on_failure, internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false),&quot;When this flag is specified, a failed assertion will throw an exception &quot;&quot;if exceptions are enabled or exit the program with a non-zero code &quot;&quot;otherwise.&quot;)']]],
  ['gtest_5fdefine_5fint32_5f',['GTEST_DEFINE_int32_',['../namespacetesting.html#a25e098abb7ce93d06582d48434be90c7',1,'testing::GTEST_DEFINE_int32_(random_seed, internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0),&quot;Random number seed to use when shuffling test orders.  Must be in range &quot;&quot;[1, 99999], or 0 to use a seed based on the current time.&quot;)'],['../namespacetesting.html#a8b2c1dad0764e0984486bae49a988f0e',1,'testing::GTEST_DEFINE_int32_(repeat, internal::Int32FromGTestEnv(&quot;repeat&quot;, 1),&quot;How many times to repeat each test.  Specify a negative number &quot;&quot;for repeating forever.  Useful for shaking out flaky tests.&quot;)'],['../namespacetesting.html#aaedd7015b957f3c37662c289b645e7d9',1,'testing::GTEST_DEFINE_int32_(stack_trace_depth, internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth),&quot;The maximum number of stack frames to print when an &quot;&quot;assertion fails.  The valid range is 0 through 100, inclusive.&quot;)']]],
  ['gtest_5fdefine_5fstatic_5fmutex_5f',['GTEST_DEFINE_STATIC_MUTEX_',['../namespacetesting_1_1internal.html#aff419d76acc3727be48d195f927189c9',1,'testing::internal']]],
  ['gtest_5fdefine_5fstring_5f',['GTEST_DEFINE_string_',['../namespacetesting.html#ad93c9ec89517d047ed323b79d96df251',1,'testing::GTEST_DEFINE_string_()'],['../namespacetesting_1_1internal.html#a1b4d550272b7346726a5b4976d5c7aca',1,'testing::internal::GTEST_DEFINE_string_()'],['../namespacetesting.html#a00b4a4eabdef5927208aeabd81220069',1,'testing::GTEST_DEFINE_string_(color, internal::StringFromGTestEnv(&quot;color&quot;,&quot;auto&quot;),&quot;Whether to use colors in the output.  Valid values: yes, no, &quot;&quot;and auto.  &apos;auto&apos; means to use colors if the output is &quot;&quot;being sent to a terminal and the TERM environment variable &quot;&quot;is set to a terminal type that supports colors.&quot;)'],['../namespacetesting.html#aa7039e72c7b7041f11d2619c93a934d6',1,'testing::GTEST_DEFINE_string_(filter, internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter()),&quot;A colon-separated list of glob (not regex) patterns &quot;&quot;for filtering the tests to run, optionally followed by a &quot;&quot;&apos;-&apos; and a : separated list of negative patterns (tests to &quot;&quot;exclude).  A test is run if it matches one of the positive &quot;&quot;patterns and does not match any of the negative patterns.&quot;)'],['../namespacetesting.html#a9f8de43b364103bafa1e8ca4bebe9d58',1,'testing::GTEST_DEFINE_string_(output, internal::StringFromGTestEnv(&quot;output&quot;,&quot;&quot;),&quot;A format (currently must be \&quot;xml\&quot;), optionally followed &quot;&quot;by a colon and an output file name or directory. A directory &quot;&quot;is indicated by a trailing pathname separator. &quot;&quot;Examples: \&quot;xml:filename.xml\&quot;, \&quot;xml::directoryname/\&quot;. &quot;&quot;If a directory is specified, output files will be created &quot;&quot;within that directory, with file-names based on the test &quot;&quot;executable&apos;s name and, if necessary, made unique by adding &quot;&quot;digits.&quot;)'],['../namespacetesting.html#a0422a6f971513cf559a8575a0533b235',1,'testing::GTEST_DEFINE_string_(stream_result_to, internal::StringFromGTestEnv(&quot;stream_result_to&quot;,&quot;&quot;),&quot;This flag specifies the host name and the port number on which to stream &quot;&quot;test results. Example: \&quot;localhost:555\&quot;. The flag is effective only on &quot;&quot;Linux.&quot;)']]],
  ['gtest_5fdisallow_5fcopy_5fand_5fassign_5f',['GTEST_DISALLOW_COPY_AND_ASSIGN_',['../classtesting_1_1internal_1_1TestEventRepeater.html#a882648737e85eff0986ff66b794e310a',1,'testing::internal::TestEventRepeater::GTEST_DISALLOW_COPY_AND_ASSIGN_()'],['../classtesting_1_1internal_1_1XmlUnitTestResultPrinter.html#a2384a8c0cae7cbdf3debac145e43b323',1,'testing::internal::XmlUnitTestResultPrinter::GTEST_DISALLOW_COPY_AND_ASSIGN_()'],['../classtesting_1_1internal_1_1ScopedPrematureExitFile.html#a4c7a2d9d5a94035756b97b5c1e0c2597',1,'testing::internal::ScopedPrematureExitFile::GTEST_DISALLOW_COPY_AND_ASSIGN_()']]]
];
